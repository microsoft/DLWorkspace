kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: dashboard
spec:
  selector:
    matchLabels:
      app: dashboard
  template:
    metadata:
      name: dashboard
      labels:
        app: dashboard
    spec:
      nodeSelector:
        dashboard: active
      containers:
      - name: dashboard
        image: '{{cnf["worker-dockerregistry"]}}/{{cnf["dockerprefix"]}}/dashboard:{{cnf["dockertag"]}}'
        imagePullPolicy: Always
        env:
        - name: TRUST_PROXY
          value: "true"
        ports:
        - name: http
          containerPort: 80
        volumeMounts:
        - name: config
          mountPath: /usr/src/app/config
      {% if cnf["private_docker_registry_username"] %}
      imagePullSecrets:
      - name: svccred
      {% endif %}
      volumes:
      - name: config
        configMap:
          name: dashboard
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/master
        effect: NoSchedule

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: dashboard
data:
  production.yaml: |
    sign: {{cnf["master_token"]}}

    masterToken: {{cnf["master_token"]}}

    activeDirectory:
      tenant: {{cnf["activeDirectory"]["tenant"]}}
      clientId: {{cnf["activeDirectory"]["clientId"]}}
      clientSecret: {{cnf["activeDirectory"]["clientSecret"]}}

    clusters:
      {{cnf["cluster_name"]}}:
        restfulapi: http://{{cnf["kubernetes_master_node"][0]}}:{{cnf["restfulapiport"]}}
        grafana: http://{{cnf["Dashboards"]["grafana"]["servers"]}}:{{cnf["Dashboards"]["grafana"]["port"]}}
        workStorage: {{cnf["workFolderAccessPoint"]}}
        dataStorage: {{cnf["dataFolderAccessPoint"]}}

    frontend:
      addGroup: https://dlts.azurewebsites.net/v2/htmlfiles/Overview/VirtualClusters.html
      wiki: https://aka.ms/dltsuserwiki_v2

---

kind: Service
apiVersion: v1
metadata:
  name: dashboard
spec:
  selector:
    app: dashboard
  ports:
  - port: 80
    targetPort: http

---

kind: Ingress
apiVersion: networking.k8s.io/v1beta1
metadata:
  name: dashboard
spec:
  rules:
  - host: '{{cnf["kubernetes_master_node"][0]}}'
    http:
      paths:
      - backend:
          serviceName: dashboard
          servicePort: 80
  tls:
    - hosts:
      - '{{cnf["kubernetes_master_node"][0]}}'
      secretName: dashboard-tls

---

kind: Issuer
apiVersion: cert-manager.io/v1alpha2
metadata:
  name: dashboard
spec:
  acme:
    server: '{{cnf["acme"]["server"]}}'
    privateKeySecretRef:
      name: dashboard
    solvers:
    - selector: {}
      http01:
        ingress:
          class: nginx

---

kind: Certificate
apiVersion: cert-manager.io/v1alpha2
metadata:
  name: dashboard
spec:
  secretName: dashboard-tls
  issuerRef:
    name: dashboard
  dnsNames:
  - '{{cnf["kubernetes_master_node"][0]}}'
