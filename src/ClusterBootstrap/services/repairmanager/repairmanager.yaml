apiVersion: v1
kind: ConfigMap
metadata:
  name: repairmanager-configmap
  namespace: kube-system
data:
  config.yaml: |-
    rules: {{cnf["repair-manager"]}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: repairmanager
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: repairmanager
  template:
    metadata:
      name: repairmanager
      labels:
        task: repair
        app: repairmanager
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: '{{cnf["repair-manager"]["port"]}}'
    spec:
      hostNetwork: true
      nodeSelector:
        repairmanager: active
      containers:
      - name: repairmanager
        image: {{cnf["worker-dockerregistry"]}}/{{cnf["dockerprefix"]}}/{{cnf["repairmanager"]}}:{{cnf["dockertag"]}}
        command:
          - "python3"
          - "/repairmanager/repairmanager.py"
        args:
          - '--config=/etc/repairmanager'
          - '--log=/var/log/repairmanager'
          - '--interval=30'
          - '--port={{cnf["repair-manager"]["port"]}}'
          - '--agent_port={{cnf["repair-manager"]["agent-port"]}}'
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /etc/kubernetes/ssl
          name: certs
        - mountPath: /root/.kube/config
          name: kubeconfig
        - mountPath: /etc/repairmanager
          name: config-volume
        - mountPath: /var/log/repairmanager
          name: log
        ports:
        - name: repairmanager
          containerPort: {{cnf["repair-manager"]["port"]}}
      {% if cnf["private_docker_registry_username"] %}
      imagePullSecrets:
      - name: svccred
      {% endif %}
      volumes:
      - name: certs
        hostPath:
          path: /etc/kubernetes/ssl
      - name: kubeconfig
        hostPath:
          path: /etc/kubernetes/restapi-kubeconfig.yaml
      - name: config-volume
        configMap:
          name: repairmanager-configmap
      - name: log
        hostPath:
          path: /var/log/repairmanager
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: node.kubernetes.io/memory-pressure
        operator: "Exists"
      - key: node.kubernetes.io/disk-pressure
        operator: "Exists"
      - key: node-role.kubernetes.io/master
        operator: "Exists"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: repairmanageragent
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: repairmanageragent
  template:
    metadata:
      name: repairmanageragent
      labels:
        task: repair
        app: repairmanageragent
    spec:
      nodeSelector:
        repairmanageragent: active
      hostNetwork: true
      hostPID: true
      containers:
      - name: repairmanageragent
        image: {{cnf["worker-dockerregistry"]}}/{{cnf["dockerprefix"]}}/{{cnf["repairmanager"]}}:{{cnf["dockertag"]}}
        securityContext:
          capabilities:
            add: ["SYS_BOOT"]
        command:
          - "python3"
          - "/repairmanager/agent.py"
        args:
          - '--log=/var/log/repairmanager'
          - '--agent_port={{cnf["repair-manager"]["agent-port"]}}'
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /var/log/repairmanager
          name: log
        - mountPath: /host-fs
          name: host-fs
        ports:
        - name: agent
          containerPort: {{cnf["repair-manager"]["agent-port"]}}
      {% if cnf["private_docker_registry_username"] %}
      imagePullSecrets:
      - name: svccred
      {% endif %}
      volumes:
      - name: log
        hostPath:
          path: /var/log/repairmanager
      - name: host-fs
        hostPath:
          path: /
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: node.kubernetes.io/memory-pressure
        operator: "Exists"
      - key: node.kubernetes.io/disk-pressure
        operator: "Exists"
