@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@

@{
    ViewData["Title"] = "Job";
}

<script>
    var cluster = "@ViewData["cluster"]";
    var elasticsearchHost = 'http://@Context.Request.Host:9200';
    var logPages;
    var logNum;

    function getJobLog(payload) {
        var jobId = '@ViewData["jobid"]'
        var client = new elasticsearch.Client({
            host: elasticsearchHost,
            //log: 'trace'
        });

        var searchParams = {
            index: '',
            _source: "log",
            body: {
                query: {
                    filtered: {
                        query: {
                            match: {
                                "kubernetes.pod_name": jobId,
                            },
                        }

                    }
                }
            }
        };



        client.count(searchParams, function (err, res) {
            logNum = res.count;
            layui.use(['laypage', 'layer'], function () {
                var laypage = layui.laypage
                    , layer = layui.layer;

                laypage.render({
                    elem: 'logautopager'
                    , count: logNum
                    , theme: '#1E9FFF'
                    , layout: ['prev', 'page', 'next']
                    , curr: (logNum / 500) + 1
                    , prev: 'Prev'
                    , next: 'Next'
                    , limit: 500
                    , limits: [500, 1000, 1500, 2000, 5000]
                    , jump: function (obj, first) {

                        //console.log(obj);
                        if (obj.curr != parseInt((logNum / 500) + 1)) {
                            layer.msg('Loaded Job Log Page: ' + obj.curr);
                            document.getElementById('chkRefresh').checked = false;
                        }
                        if (logNum > 0) {
                            var searchParams = {
                                index: '',
                                from: (obj.curr - 1) * obj.limit,
                                size: obj.limit,
                                sort: "time:asc",
                                _source: "log,time",
                                body: {
                                    query: {
                                        filtered: {
                                            query: {
                                                match: {
                                                    "kubernetes.pod_name": jobId,
                                                },
                                            }

                                        }
                                    }
                                }
                            };

                            client.search(searchParams, function (err, res) {
                                var logstr = "";
                                var hits = res.hits.hits.sort(function (a, b) {
                                    if (a._source.time < b._source.time)
                                        return -1;
                                    else
                                        return 1;

                                })
                                for (var i = 0; i < hits.length; i++) {
                                    if (document.getElementById('chkTimestamp').checked) {
                                        logstr += '[' + hits[i]._source.time + '] ' + hits[i]._source.log;
                                    }
                                    else
                                    {
                                        logstr += hits[i]._source.log;
                                    }
                                }

                                var objDiv = document.getElementById('logPanel');
                                objDiv.style.height = "500px";
                                objDiv.innerHTML = logstr;
                                if (obj.curr == parseInt((logNum / 500) + 1)) {
                                    objDiv.scrollTop = objDiv.scrollHeight;
                                }
                                else {
                                    objDiv.scrollTop = 0;
                                }
                            });
                        }
                        else
                        {
                            if (payload.log) {
                                //console.log(payload.jobId);
                                if (payload.log != "fail-to-get-logs") {
                                    var objDiv = document.getElementById('logPanel');
                                    objDiv.style.height = "500px";
                                    objDiv.innerHTML = payload.log;
                                    objDiv.scrollTop = objDiv.scrollHeight;
                                }
                            }
                            else {
                                var logPanelDiv = document.getElementById('logPanel');
                                logPanelDiv.innerHTML = "No log yet!";
                                logPanelDiv.style.height = "50px";
                            }

                        }
                    }
                });
            });
        });
    }


    function getCommands() {
        $.ajax({ url: "/api/dlws/GetCommands?cluster=" + cluster + "&jobId=@ViewData["jobid"]", dataType: 'json', timeout: 10000, error: AlertAPIError }).done(
            function (json) {
                var commandsDiv = document.getElementById('commands-div');
                if (json.length == 0) {
                    commandsDiv.style.display = "none";
                }
                else {
                    commandsDiv.style.display = "block";
                    var table = $('#command-table');
                    table.find("tr").remove();
                    for (var i = 0; i < json.length; i++) {
                        var tr
                        tr = $('<tr/>');
                        //Time
                        tr.append("<td>" + json[i].time + "</td>");
                        //Command
                        tr.append("<td>" + json[i].command + "</td>");
                        //Status
                        if (json[i].status === "run") {
                            var resultButton = '<a href="#" onclick="alert(\'' + json[i].output + '\')">Display Result</a>';
                            tr.append('<td><bold class="Admin">' + json[i].status + "</bold> | " + resultButton + '</td>');
                        }
                        else {
                            tr.append('<td><bold class="Alias">' + json[i].status + '</bold></td>');
                        }

                        table.append(tr);
                    }
                }
            });
    }

    function getEndpoints() {
        $.ajax({
            url: "/api/dlws/GetEndpoints?cluster=@ViewData["cluster"]&jobId=@ViewData["jobid"]", dataType: 'json'
        }).then(function (endpoints) {
            $('#endpoints').show();

            endpoints.sort(function (a, b) {
                return String(a.podName).localeCompare(b.podName)
            });

            var endpointsStr = $.map(endpoints, function (endpoint) {
                //console.log(endpoint.podName);
                var task = "";

                if (endpoint.podName) {
                    task = endpoint.podName.split("-").pop();
                }

                if (task.indexOf("ps0") !== -1 && endpoint.name.indexOf("ssh") !== -1) {
                    return "";
                }
                var taskInfo = task.indexOf("worker") === -1 ? "" : ", for " + task;
                if (endpoint.name == "ssh") {
                    window.ngScope.$applyAsync('ssh = true');
                    if (endpoint.status == "running") {
                        return "To access the container via SSH" + taskInfo + ", use command: ssh -i " + "@ViewData["workPath"]" + ".ssh/id_rsa -p " + endpoint.port + " " + endpoint.username + "@@" + endpoint.nodeName + "." + endpoint.domain + "\n";
                    } else {
                        return;
                    }
                }
                else {
                    window.ngScope.$applyAsync('ipython = true');
                    if (endpoint.status == "running") {
                        var svcurl = "http://" + endpoint.nodeName + "." + endpoint.domain + ":" + endpoint.port + "/";
                        return endpoint.name + " could be access via: <a href='" + svcurl + "' target='_blank'>" + svcurl + "</a>\n";
                    } else {
                        return;
                    }
                }
            }).join("<br/>");
            var endpointsPanellDiv = document.getElementById('endpointsPanel');
            if (endpointsPanellDiv.innerHTML != endpointsStr) {
                endpointsPanellDiv.innerHTML = endpointsStr;
            }
        })
    }

    function buildTemplateList() {
        $.ajax({ url: "/api/dlws/GetTemplates?cluster=" + cluster + "&type=command", dataType: 'json', timeout: 10000, error: AlertAPIError }).done(
            function (json) {
                $('#templateselect').find("option").remove();
                for (var i = 0; i < json.length; i++) {
                    var row = $("<option>" + json[i].Name + "</option>");
                    row.attr("value", JSON.stringify(json[i].Json));
                    $('#templateselect').append(row);
                }
            });
    }

    function DisplayDetail(payload) {
        if (payload.jobParams) {

            var jobDetailDiv = document.getElementById('jobDetail');
            var jobDetailStr = "Job Id: " + payload.jobParams.jobId + "\n";
            jobDetailStr += "Job Name: " + payload.jobParams.jobName + "\n";
            jobDetailStr += "Docker Image: " + payload.jobParams.image + "\n";
            jobDetailStr += "Command: " + payload.jobParams.cmd + "\n";
            jobDetailStr += "Data Path: " + payload.jobParams.dataPath + "\n";
            jobDetailStr += "Work Path: " + payload.jobParams.workPath + "\n";
            jobDetailStr += "Container Ports: " + payload.jobParams.interactivePort + "\n";
            jobDetailStr += "Job Path: " + payload.jobParams.jobPath + "\n";
            jobDetailStr += "Job Type: " + payload.jobParams.jobType + "\n";
            jobDetailStr += "GPU # Per Worker: " + payload.jobParams.resourcegpu + "\n";
            jobDetailStr += "Job Status: " + payload.jobStatus + "\n";
            jobDetailStr += "Job Submission Time: " + payload.jobTime + "\n";
            if (jobDetailDiv.innerHTML != jobDetailStr) {
                jobDetailDiv.innerHTML = jobDetailStr;
            }
            var jobfolderDiv = document.getElementById('jobfolderPanel');
            var jobfolderStr = "<a href='file:@ViewData["jobPath"]" + payload.jobParams.jobPath + "'> file:@ViewData["jobPath"]" + payload.jobParams.jobPath + "</a>";
            if (jobfolderDiv.innerHTML != jobfolderStr) {
                jobfolderDiv.innerHTML = jobfolderStr;
            }

            document.getElementById('run-command').style.display = payload.jobStatus == "running" ? "block" : "none";
            if (payload.jobStatus == "running") {
                getCommands();
                getEndpoints();
            }
        }



        var client = new elasticsearch.Client({
            host: elasticsearchHost,
            log: [{
                levels: ["error"] // change these options
            }]
        });

        client.ping({
            requestTimeout: 1000,
        }, function (error) {
            if (error) {
                if (payload.log) {
                    //console.log(payload.jobId);
                    if (payload.log != "fail-to-get-logs") {
                        var objDiv = document.getElementById('logPanel');
                        objDiv.style.height = "500px";
                        objDiv.innerHTML = payload.log;
                        objDiv.scrollTop = objDiv.scrollHeight;
                    }
                }
                else {
                    var logPanelDiv = document.getElementById('logPanel');
                    logPanelDiv.innerHTML = "No log yet!";
                    logPanelDiv.style.height = "50px";
                }
            } else {
                getJobLog(payload);
            }
            });

        if ($('#elasticsearchlog').is(":visible"))
        {
        }

    }

    function GetDetail() {
        var url = "/api/dlws/JobDetail?cluster=" + cluster + "&jobId=@ViewData["jobid"]";
        $.ajax({ url: url, dataType: 'json', timeout: 15000 }).done(DisplayDetail);
    }

    function RefreshDetail() {
        if (document.getElementById('chkRefresh').checked) {
            GetDetail();
        }
    }

    $(document).ready(function () {
        GetDetail();
        buildTemplateList();
        setInterval(RefreshDetail, 15000);

    });
</script>
<script>
    function AlertCommandResult(payload) {
        alert(payload.result);
        $("#run-cmd-btn").attr("disabled", false);
    }

    function AlertAPIError(xhr, ajaxOptions, thrownError) {
        //alert("Restful API Error: \n" + JSON.stringify(thrownError));
        console.log("Restful API Error: \n" + JSON.stringify(thrownError));
        $("#run-cmd-btn").attr("disabled", false);
    }

    function RunCommand() {
        $("#run-cmd-btn").attr("disabled", true);
        var url = "/api/dlws/RunCommand?cluster=" + cluster + "&jobId=@ViewData["jobid"]&";
        url = url + "command=" + encodeURIComponent(document.getElementById("cmd-textbox").value);
        $.ajax({ url: url, dataType: 'json', timeout: 10000,  error: AlertAPIError }).done(AlertCommandResult);
    }

    function UseTemplate(tempValue) {
        var temp = JSON.parse(tempValue);
        var cmdString = (temp.cmd) ? temp.cmd : "";
        document.getElementById("cmd-textbox").value = cmdString;
    }

</script>
<script>
    void function (app) {
        app.controller("endpointSwitches", function ($scope, $http) {
            $scope.$watch("ssh", function (value, oldValue) {
                if (value === oldValue) { return; }
                if (value) {
                    $http({
                        method: "POST",
                        url: "/api/dlws/endpoints",
                        params: { cluster: cluster },
                        data: {
                            jobId: '@ViewData["jobid"]',
                            endpoints: ["ssh"]
                        }
                    })
                }
            })
            $scope.$watch("ipython", function (value, oldValue) {
                if (value === oldValue) { return; }
                if (value) {
                    $http({
                        method: "POST",
                        url: "/api/dlws/endpoints",
                        params: { cluster: cluster },
                        data: {
                            jobId: '@ViewData["jobid"]',
                            endpoints: ["ipython"]
                        }
                    })
                }
            })

            window.ngScope = $scope;
        });
    }(angular.module("endpointSwitches", ["ngMaterial"]));
</script>

<h2> Job Details:</h2>
<div id="jobDetail" style="height: 230px;" readonly="" class="ng-binding grey-box scroll-box">
</div>
<h2> Job Folder: </h2>
<div id="jobfolderPanel" style="height: 20px;" readonly="" class="ng-binding grey-box">
</div>
<div id="endpoints" hidden>
    <h2> Mapped Endpoints: </h2>
    <h4>(Links to access interactive/visualization interface)</h4>
    <div id="endpointsPanel" readonly="" class="ng-binding grey-box">
    </div>
</div>
<!-- introduce angular.js just for md-switch in AngularJS Material -->
<div ng-app="endpointSwitches" ng-controller="endpointSwitches">
    <md-switch ng-model="ssh" ng-disabled="ssh">SSH</md-switch>
    <md-switch ng-model="ipython" ng-disabled="ipython">ipython</md-switch>
</div>
<h2> Job Console Output:</h2>
<div id="logPanel" style="height: 500px;" readonly="" class="ng-binding grey-box scroll-box">
</div>
<div id="logautopager" style="float:right"></div>

<div>
    <input type="checkbox" id="chkRefresh" checked="checked" onclick="RefreshDetail()" />
    <label>
        Auto-Refresh Job Logs (Refresh-Rate 5 Seconds)
    </label>
    <input type="checkbox" id="chkTimestamp" checked="checked" onclick="RefreshDetail()" />
    <label>
        Show timestamp in job logs
    </label>
</div>

<div id="run-command" style="display: none">
    <h2> Run Command:</h2>
    <label>Use Template: </label>
    <select onchange="UseTemplate(this.value)" id="templateselect"></select>
    <div style="display: block; position: relative; width: 100%;">
        <textarea class="form-control cmd-textbox" style="height: 10em; display: block" id="cmd-textbox"></textarea>
        <button class="btn btn-success" style="position: absolute; bottom: 10px; right: 10px" onclick="RunCommand()" id="run-cmd-btn">Run</button>
    </div>
    <div id="commands-div" style="display:none">
        <br />
        <h4>Commands</h4>
        <table class="table table-bordered table-condensed table-hover table-striped">
            <thead>
                <tr>
                    <th>Time</th>
                    <th style="width:60%">Command</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="command-table"></tbody>
        </table>
    </div>
</div>
<br />


<div>
    <h2> Job analytics and monitoring:</h2>
    <iframe src="@ViewData["grafana"]/dashboard/db/job-status?var-job_name=@ViewData["jobid"]" width="100%" height="1000" frameborder="0"></iframe>
</div>
<style>

    .grey-box {
        background-color: #eee;
        white-space: pre;
        word-wrap: normal;
    }

    .scroll-box {
        overflow-x: scroll;
        overflow-y: scroll;
    }

    .grey-box, .cmd-textbox {
        font-family: 'Courier New';
        font-weight: 600;
        font-size: 12px;
    }

    .cmd-textbox {
        width: 100%;
        max-width: none;
    }
</style>

