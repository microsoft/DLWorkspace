{% if job["role_name"] %}
{% set jobRole = job["role_name"] %}
{% else %}
{% set jobRole = "worker" %} # treat regular job's pod as worker role
{% endif %}

apiVersion: v1
kind: Pod
metadata:
  name: {{ job["podName"] }}
  labels:
    run: {{ job["jobId"] }}
    podName: {{ job["podName"] }}
    jobId: {{ job["jobId"] }}
    jobRole: {{ jobRole }}
    userName: {{ job["user"] }}
    vcName: {{ job["vcName"] }}
    type: job
    'gpu-request': '{{ job["gpuLimit"]|int }}'

  {% for label in job["labels"] %}
    {{label.name}}: "{{label.value}}"
  {% endfor %}

  {% if "gpuType" in job %}
    {% if job["gpuType"]|length > 0 %}
    gpuType: {{ job["gpuType"] }}
    {% endif %}
  {% endif %}
    preemptionAllowed: "{{ job["preemptionAllowed"] }}"

  {% if "annotations" in job %}
  annotations:
    {% for annotationKey,annotationVal in job["annotations"].items() %}
      {{ annotationKey }}: {{ annotationVal }}
    {% endfor %}
  {% endif %}

spec:
  nodeSelector:
    worker: active
  {% if job["nodeSelector"]|length > 0 %}
  {% for key, value in job["nodeSelector"].items() %}
    {{key}}: {{value}}
  {% endfor %}
  {% endif %}
  {% if job["gpuLimit"]|int != 0 or jobRole == "ps" %}
  affinity:
    podAffinity:
      {% if jobRole == "ps" %}
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector: # try to put worker & ps in same node
          matchExpressions:
          - key: "jobId"
            operator: In
            values:
            - "{{ job["jobId"] }}"
          - key: "jobRole"
            operator: In
            values:
            - "worker"
        topologyKey: "kubernetes.io/hostname"
      {% else %}
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 50 # For regular jobs, distributed jobs will consume all gpus in node
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: "type"
              operator: In
              values:
              - "job"
          topologyKey: "kubernetes.io/hostname"
      - weight: 100 # For distributed jobs, try to cluster pod of same job into one region
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: jobId
              operator: In
              values:
              - "{{ job["jobId"] }}"
          topologyKey: "failure-domain.beta.kubernetes.io/region"
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 50
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: jobId
              operator: In
              values:
              - "{{ job["jobId"] }}"
          topologyKey: "failure-domain.beta.kubernetes.io/zone"
      {% endif %}
  {% endif %}
  {% if job["dnsPolicy"] %}
  dnsPolicy: {{ job["dnsPolicy" ]}}
  {% endif %}
  {% if job["hostNetwork"] %}
  hostNetwork: true
  {% endif %}
  {% if job["hostIPC"] %}
  hostIPC: true
  {% endif %}
  initContainers:
  - name: init
    imagePullPolicy: Always
    image: {{ job["init-container"] }}
    volumeMounts:
    - mountPath: /dlts-runtime
      name: dlts-runtime
    command:
    - sh
    - /dlts-init/init.sh
    env:
    - name: LOGGING_LEVEL
    {% if job["debug"] %}
      value: DEBUG
    {% else %}
      value: INFO
    {% endif %}
    - name: DLTS_JOB_ID
      value: {{ job["jobId"] }}
    - name: DLTS_NUM_PS
      value: "{{ job["numps"] }}"
    - name: DLTS_NUM_WORKER
      value: "{{ job["numworker"] }}"
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    {% if job["hostNetwork"] %}
    - name: DLTS_HOST_NETWORK
      value: "enable"
    {% endif %}
  containers:
  - name: {{ job["podName"] }}
    image: {{ job["image"] }}
    imagePullPolicy: Always
    command: ["bash", "/dlws-scripts/bootstrap.sh"]
    readinessProbe:
      exec:
        command: ["ls", "/dlts-runtime/status/READY"]
      initialDelaySeconds: 3
      periodSeconds: 10
    securityContext:
      runAsUser: {{ job["containerUserId"] }}
    {% if job["isPrivileged"] %}
      privileged: true
    {% endif %}
      capabilities:
        add:
        - IPC_LOCK
        - SYS_ADMIN
    resources:
      limits:
        nvidia.com/gpu: {{ job["gpuLimit"] }}
      {% if job["cpulimit"] %}
        cpu: {{ job["cpulimit"]  }}
      {% endif %}
      {% if job["memorylimit"] %}
        memory: {{ job["memorylimit"] }}
      {% endif %}
      requests:
      {% if not job["cpurequest"] %}
        cpu: 1.0
      {% else %}
        cpu: {{ job["cpurequest"] }}
      {% endif %}
      {% if job["memoryrequest"] %}
        memory: {{ job["memoryrequest"] }}
      {% endif %}
    volumeMounts:
    - mountPath: /dlts-runtime
      name: dlts-runtime
    - name: "dlws-scripts"
      mountPath: /dlws-scripts
      readOnly: true
    - name: ssh-volume
      mountPath: /home/{{ job["user"] }}/.ssh
    {% if not job["dnsPolicy"] %}
    - mountPath: /etc/resolv.conf
      name: resolv
    {% endif %}
    - mountPath: /dev/shm
      name: dshm
    {% for mp in job["mountpoints"] %}
    {% if mp["enabled"] %}
    - name: {{ mp["name"] }}
      mountPath: {{ mp["mountPath"] }}
      {% if mp["subPath"] %}
      subPath: {{ mp["subPath"] }}
      {% endif %}
      {% if mp["readOnly"] %}
      readOnly: true
      {% endif %}
    {% endif %}
    {% endfor %}
    env:
    - name: FAMILY_TOKEN
      value: {{ job["familyToken"] }}
    - name: DLWS_JOB_ID
      value: {{ job["jobId"] }}
    - name: DLTS_JOB_ID
      value: {{ job["jobId"] }}
    - name: DLWS_ROLE_NAME
      value: {{ job["role_name"] }}
    - name: DLTS_ROLE_NAME
      value: {{ job["role_name"] }}
    - name: DLWS_NUM_PS
      value: "{{ job["numps"] }}"
    - name: DLTS_NUM_PS
      value: "{{ job["numps"] }}"
    - name: DLWS_NUM_WORKER
      value: "{{ job["numworker"] }}"
    - name: DLTS_NUM_WORKER
      value: "{{ job["numworker"] }}"
    {% if job["gpuLimit"]|int < 1  %}
    - name: NVIDIA_VISIBLE_DEVICES
      value: ""
    {% endif %}
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_IP
      valueFrom:
        fieldRef:
          fieldPath: status.podIP
    - name: DLWS_GID
      value: "{{ job["gid"] }}"
    - name: DLTS_GID
      value: "{{ job["gid"] }}"
    - name: DLWS_UID
      value: "{{ job["uid"] }}"
    - name: DLTS_UID
      value: "{{ job["uid"] }}"
    - name: DLWS_USER_NAME
      value: "{{ job["user"] }}"
    - name: DLTS_USER_NAME
      value: "{{ job["user"] }}"
    - name: DLWS_USER_EMAIL
      value: "{{ job["user_email"] }}"
    - name: DLTS_USER_EMAIL
      value: "{{ job["user_email"] }}"
    - name: DLWS_VC_NAME
      value: {{ job["vcName"] }}
    - name: DLTS_VC_NAME
      value: {{ job["vcName"] }}
    {% if job["hostNetwork"] %}
    - name: DLWS_HOST_NETWORK
      value: "enable"
    - name: DLTS_HOST_NETWORK
      value: "enable"
    {% endif %}
    - name: DLTS_PREEMPTIBLE
    {% if job["preemptionAllowed"] %}
      value: "true"
    {% else%}
      value: "false"
    {% endif %}
    {% for env in job["envs"] %}
    - name: {{env.name}}
      value: "{{env.value}}"
    {% endfor %}
    {% for key_value in job["ssh_public_keys"] %}
    - name: DLTS_PUBLIC_SSH_KEY_{{loop.index}}
      value: "{{key_value}}"
    {% endfor %}

  imagePullSecrets:
  {% if job["plugins"] %}
    {% if job["plugins"]["imagePull"] %}
      {% for secret in job["plugins"]["imagePull"] %}
        {% if secret.enabled %}
  - name: {{ secret.name }}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endif %}
  - name: regcred

  restartPolicy: Never
  volumes:
  - name: "dlws-scripts"
    configMap:
      name: "dlws-scripts"
  - name: ssh-volume
    emptyDir: {}
  - name: dlts-runtime
    emptyDir: {}
  - name: dshm
    emptyDir:
      medium: Memory
  {% if not job["dnsPolicy"] %}
  - name: resolv
    hostPath:
      path: /etc/resolv.conf
  {% endif %}
  {% if job["mountpoints"] %}
  {% for mp in job["mountpoints"] %}
  {% if mp["enabled"] %}
  - name: {{ mp["name"] }}
  {% if mp["emptydir"] %}
    emptyDir: {}
  {% elif mp["mountType"] == "hostPath" %}
    hostPath:
      path: {{ mp["hostPath"] }}
      {% if mp["type"] %}
      type: {{ mp["type"] }}
      {% endif %}
  {% elif mp["mountType"] == "nfs" %}
    nfs:
      server: {{ mp["server"] }}
      path: {{ mp["path"] }}
  {% elif mp["mountType"] == "blobfuse" %}
    flexVolume:
      driver: "azure/blobfuse"
      readOnly: false
      secretRef:
        name: {{ mp["secreds"] }}
      options:
        container: {{ mp["containerName"] }}
        {% if mp["rootTmppath"] and mp["tmppath"] %}
        tmppath: {{ mp["rootTmppath"] }}/{{ job["jobId"] }}/{{ job["podName"] }}/{{ mp["tmppath"] }}
        {% endif %}
        {% if mp["mountOptions"] %}
        mountoptions: {{ mp["mountOptions"] }}
        {% endif %}
  {% endif %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% if job["priority_class"] %}
  priorityClassName: {{ job["priority_class"] }}
  {% endif %}
